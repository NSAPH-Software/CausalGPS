% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimate_erf.R
\name{estimate_erf}
\alias{estimate_erf}
\title{Estimate smoothed exposure-response function (ERF).}
\usage{
estimate_erf(
  matched_Y,
  matched_w,
  matched_counter = NULL,
  bw_seq = seq(0.2, 2, 0.2),
  w_vals,
  nthread
)
}
\arguments{
\item{matched_Y}{a vector of outcome variable in the matched set.}

\item{matched_w}{a vector of continuous exposure variable in the matched set.}

\item{matched_counter}{a vector of counter variable in the matched set.}

\item{bw_seq}{a vector of bandwidth values (Default is seq(0.2,2,0.2)).}

\item{w_vals}{a vector of values that you want to calculate the values of
the ERF at.}

\item{nthread}{number of available cores.}
}
\value{
The function returns a gpsm_erf object. The object includes the following
attributes:
\itemize{
\item params
\item matched_Y
\item matched_w
\item bw_seq
\item w_vals
\item erf
\item fcall
}
}
\description{
Estimates the smoothed exposure-response function using a kernel smoothing
approach. We use a data-driven bandwidth selection.
}
\examples{

m_d <- gen_syn_data(sample_size = 100)
pseudo_pop <- gen_pseudo_pop(m_d$Y,
                             m_d$treat,
                             m_d[c("cf1","cf2","cf3","cf4","cf5","cf6")],
                             ci_appr = "matching",
                             pred_model = "sl",
                             sl_lib = c("m_xgboost"),
                             params = list(xgb_nrounds=c(10,20,30),
                              xgb_eta=c(0.1,0.2,0.3)),
                             nthread = 1,
                             covar_bl_method = "absolute",
                             covar_bl_trs = 0.1,
                             max_attempt = 1,
                             matching_fun = "matching_l1",
                             delta_n = 1,
                             scale = 0.5)

erf_obj <- estimate_erf(pseudo_pop$pseudo_pop$Y,
                        pseudo_pop$pseudo_pop$w,
                        bw_seq=seq(0.2,2,0.2),
                        w_vals = seq(2,20,0.5),
                        nthread = 1)


}
