#MAC_matched<-matrix(NA,nrow=20,ncol=6)
library("parallel")
library('wCorr')
library("polycor")
library(nnet)
library("MASS")

balancing.l1.caliper<-function(simulated.data,GPS_mod,a,delta_n=1,scale=0.5){
  p.a<-dnorm(a,mean = predict(GPS_mod,simulated.data),sd=summary(GPS_mod)$sigma)
  
  which.a<-sapply(1:nrow(simulated.data), function(i){
    simulated.data$std.treat<-((simulated.data$treat)-min(simulated.data$treat))/(max(simulated.data$treat)-min(simulated.data$treat))
    simulated.data$std.GPS<-((simulated.data$GPS)-min(simulated.data$GPS))/(max(simulated.data$GPS)-min(simulated.data$GPS))
    std.a<-(a-min(simulated.data$treat))/(max(simulated.data$treat)-min(simulated.data$treat))
    std.p.a<-(p.a-min(simulated.data$GPS))/(max(simulated.data$GPS)-min(simulated.data$GPS))
    
    
    simulated.data.subset<-subset(simulated.data, abs(treat-a)<=delta_n/2)
    dp<-simulated.data.subset[which.min(abs(simulated.data.subset$std.treat-std.a)*(1-scale)+abs(simulated.data.subset$std.GPS-std.p.a[i])*scale),]
    if (nrow(dp)>0){as.numeric(row.names(dp))
    }else{NA}
  })
  #   as.numeric(indx)
  # })
  weight.a<-nrow(simulated.data)/sum(is.na(which.a)==F)
  #return(dp)
  return(list(which.a,rep(weight.a,nrow(simulated.data))))
}



MAC_matched_CV<-function(scale,gps_spec=1,sample_size=1000,delta_n){
  cor_matched<-matrix(NA,nrow=100,ncol=6)
  cor_original<-matrix(NA,nrow=100,ncol=6)
  #for (seed.i in 1:100){
    delta_n<-0.5
    simulated.data<-data_generate(sample_size=1000,seed=1,gps_spec= 3, cova_spec = 1)
    GPS_mod<-lm(treat ~ cf1+cf2+cf3+cf4+cf5 + cf6 , simulated.data)
    predict<-predict(GPS_mod,simulated.data)
    simulated.data$GPS<-dnorm(simulated.data$treat,mean=predict,sd=summary(GPS_mod)$sigma)
    Nm<-dnorm(simulated.data$treat,mean=mean(simulated.data$treat),sd=sd(simulated.data$treat))
    simulated.data$IPW<-Nm/(simulated.data$GPS)
    bin.num<-floor(max(simulated.data$treat))-ceiling(min(simulated.data$treat))
    
    #balancing.l1.caliper(simulated.data=simulated.data,GPS_mod=GPS_mod,a=1,delta_n=delta_n,flexible= flexible,predict=predict,scale=scale)
    balancing.index<-matrix(NA,nrow=floor(bin.num/delta_n),ncol=nrow(simulated.data))
    balancing.weights<-matrix(NA,nrow=floor(bin.num/delta_n),ncol=nrow(simulated.data))
    for (a_i in (1:(floor(bin.num/delta_n)))){
      balancing.result<-balancing.l1.caliper(simulated.data=simulated.data,GPS_mod=GPS_mod,a=(a_i*delta_n+ceiling(min(simulated.data$treat))),delta_n=delta_n,scale = scale)
      balancing.index[a_i,]<-balancing.result[[1]]
      balancing.weights[a_i,]<-balancing.result[[2]]
    }
    
    matched.data<-simulated.data[as.numeric(balancing.index),]
    #matched.data$weights<-as.numeric(balancing.weights)
    #simulated_data <- data_generate(sample_size=sample_size,seed=seed_id,gps_spec= spec, cova_spec = cova_spec)
    c <- simulated.data[,-c(1:2)]
    treat <- as.vector(simulated.data[,"treat"])
    treat_quantile = quantile(treat,c(0.05,0.95))
    Y <- as.vector(simulated.data[,"Y"])
    matched.data2 = run_sim_dose_matching(Y=Y,
                                       treat=treat,
                                       c=c,
                                      #sl.lib=sl.lib,
                                       delta_n = delta_n,
                                       scale = scale)
    matched.data<-subset(matched.data, treat>=quantile(matched.data$treat,0.05,na.rm = TRUE)&treat<=quantile(matched.data$treat,0.95,na.rm = TRUE))
    #matched.data$weights<-as.numeric(balancing.weights),])
    matched.data<-matched.data[complete.cases(matched.data),]
    
    simulated.data<-subset(simulated.data, treat>=quantile(matched.data$treat,0.05,na.rm = TRUE)&treat<=quantile(matched.data$treat,0.95,na.rm = TRUE))
    
    
    cor_original[seed.i,]<-c(abs(cor(simulated.data$treat,simulated.data$cf1,method = c("spearman"))),
                             abs(cor(simulated.data$treat,simulated.data$cf2,method = c("spearman"))),
                             abs(cor(simulated.data$treat,simulated.data$cf3,method = c("spearman"))),
                             abs(polyserial(simulated.data$treat,simulated.data$cf4)),
                             abs(cor(simulated.data$treat,simulated.data$cf5,method = c("spearman"))),
                             abs(cor(simulated.data$treat,simulated.data$cf6,method = c("spearman"))))
    
    cor_matched[seed.i,]<-c(abs(cor(matched.data$treat,matched.data$cf1,method = c("spearman"))),
                            abs(cor(matched.data$treat,matched.data$cf2,method = c("spearman"))),
                            abs(cor(matched.data$treat,matched.data$cf3,method = c("spearman"))),
                            abs(polyserial(matched.data$treat,matched.data$cf4)),
                            abs(cor(matched.data$treat,matched.data$cf5,method = c("spearman"))),
                            abs(cor(matched.data$treat,matched.data$cf6,method = c("spearman"))))
    
    # cor_matched_weighted[seed.i,]<-abs(c(
    #   weightedCorr(matched.data$treat,matched.data$cf1,weights = matched.data$weights,method = c("Pearson")),
    #   weightedCorr(matched.data$treat,matched.data$cf2,weights = matched.data$weights,method = c("Pearson")),
    #   weightedCorr(matched.data$treat,matched.data$cf3,weights = matched.data$weights,method = c("Pearson")),
    #   weightedCorr(matched.data$treat,matched.data$cf4,weights = matched.data$weights,method = c("Polyserial")),
    #   weightedCorr(matched.data$treat,matched.data$cf5,weights = matched.data$weights,method = c("Pearson")),
    #   weightedCorr(matched.data$treat,matched.data$cf6,weights = matched.data$weights,method = c("Pearson"))))
  }
  return(c(colMeans(cor_matched),colMeans(cor_original)))
}

MAC_matched1<-mclapply(seq(0.1,1,0.1),MAC_matched_CV,gps_spec=1,sample_size=200,delta_n=1,mc.cores=25)
MAC_matched2<-mclapply(seq(0.1,1,0.1),MAC_matched_CV,gps_spec=2,sample_size=200,delta_n=1,mc.cores=25)
MAC_matched3<-mclapply(seq(0.1,1,0.1),MAC_matched_CV,gps_spec=3,sample_size=200,delta_n=1,mc.cores=25)

MAC_matched1.df<-data.frame(matrix(unlist(MAC_matched1), nrow=10, byrow=T))
MAC_matched2.df<-data.frame(matrix(unlist(MAC_matched2), nrow=10, byrow=T))
MAC_matched3.df<-data.frame(matrix(unlist(MAC_matched3), nrow=10, byrow=T))

save(MAC_matched1.df,MAC_matched2.df,MAC_matched3.df,file="MAC_matched_CV1_delta1_matched200.Rdata")

MAC_matched1<-mclapply(seq(0.1,1,0.1),MAC_matched_CV,gps_spec=1,sample_size=1000,delta_n=0.5,mc.cores=25)
MAC_matched2<-mclapply(seq(0.1,1,0.1),MAC_matched_CV,gps_spec=2,sample_size=1000,delta_n=0.5,mc.cores=25)
MAC_matched3<-mclapply(seq(0.1,1,0.1),MAC_matched_CV,gps_spec=3,sample_size=1000,delta_n=0.5,mc.cores=25)

MAC_matched1.df<-data.frame(matrix(unlist(MAC_matched1), nrow=10, byrow=T))
MAC_matched2.df<-data.frame(matrix(unlist(MAC_matched2), nrow=10, byrow=T))
MAC_matched3.df<-data.frame(matrix(unlist(MAC_matched3), nrow=10, byrow=T))

save(MAC_matched1.df,MAC_matched2.df,MAC_matched3.df,file="MAC_matched_CV1_delta05_matched1000.Rdata")


MAC_matched1<-mclapply(seq(0.1,1,0.1),MAC_matched_CV,gps_spec=1,sample_size=5000,delta_n=0.2,mc.cores=25)
MAC_matched2<-mclapply(seq(0.1,1,0.1),MAC_matched_CV,gps_spec=2,sample_size=5000,delta_n=0.2,mc.cores=25)
MAC_matched3<-mclapply(seq(0.1,1,0.1),MAC_matched_CV,gps_spec=3,sample_size=5000,delta_n=0.2,mc.cores=25)

MAC_matched1.df<-data.frame(matrix(unlist(MAC_matched1), nrow=10, byrow=T))
MAC_matched2.df<-data.frame(matrix(unlist(MAC_matched2), nrow=10, byrow=T))
MAC_matched3.df<-data.frame(matrix(unlist(MAC_matched3), nrow=10, byrow=T))

save(MAC_matched1.df,file="MAC_matched_CV1_delta02_matched5000_1.Rdata")

save(MAC_matched2.df,file="MAC_matched_CV1_delta02_matched5000_2.Rdata")

save(MAC_matched3.df,file="MAC_matched_CV1_delta02_matched5000_3.Rdata")




