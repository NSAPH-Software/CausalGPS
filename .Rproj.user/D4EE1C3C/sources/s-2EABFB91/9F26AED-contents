#' GPS Matching function to create matched set.
#'
#' @param Y a vector of observed outcome variable.
#' @param w a vector of observed continuous exposure variable.
#' @param c a data frame or matrix of observed covariates variable.
#' @param matching_fun a specifed matching function (Default is "matching_l1" (Manhattan distance matching)).
#' @param scale a specified scale parameter to control the relative weight that is attributed to the distance measures of the exposure versus the GPS estimates (Default is 0.5).
#' @param delta_n a specified caliper parameter on the exposure (Default is 1).
#' @param sl.lib a set of methods used for estimating GPS (Default is ("SL.xgboost","SL.earth","SL.gam","SL.ranger")).
#' @return
#' \code{matched_set}: The function returns a data.table saved the constructed matched set by the proposed GPS matching approaches.
#' @export

# Matching function using L1 distance on single exposure level w
matching_l1 <- function(dataset,
                        e_gps_pred,
                        e_gps_std_pred,
                        w,
                        delta_n=1,
                        w_resid,
                        scale)
{
  w_new <- (w-e_gps_pred)/e_gps_std_pred
  p.w <- approx(density(w_resid,na.rm = TRUE)$x,density(w_resid,na.rm = TRUE)$y,xout=w_new,rule=2)$y

  w.min <- min(dataset[["w"]],na.rm=T)
  w.max <- max(dataset[["w"]],na.rm=T)
  gps.min <- min(dataset[["gps"]],na.rm=T)
  gps.max <- max(dataset[["gps"]],na.rm=T)
  ##
  dataset <- transform(dataset,
                       std.w = (w - w.min) / (w.max - w.min),
                       std.gps = (gps - gps.min) / (gps.max - gps.min))
  std.w <- (w - w.min) / (w.max - w.min)
  std.p.w <- (p.w - gps.min) / (gps.max - gps.min)
  ##
  dataset.subset <- dataset[abs(dataset[["w"]] - w) <= (delta_n/2), ]
  ##
  wm <- apply(abs(outer(dataset.subset[["std.gps"]], std.p.w, `-`)) * scale,
              2,
              function(x) which.min(abs(dataset.subset[["std.w"]] - std.w) * (1 - scale) + x)
  )
  dp <- dataset.subset[wm,]
  return(dp)
  gc()
}

# Create matched set using GPS matching approaches
create_matching <- function(Y,
                            w,
                            c,
                            matching_fun=matching_l1,
                            sl.lib = c("SL.xgboost","SL.earth","SL.gam","SL.ranger"),
                            scale=0.5,
                            delta_n=1){
  ## GPS function estimation
  e_gps <- SuperLearner(Y=w, X=data.frame(c), SL.library=sl.lib)
  e_gps_pred <- e_gps$SL.predict
  e_gps_std <- SuperLearner(Y=abs(w-e_gps_pred), X=c, SL.library=sl.lib)
  e_gps_std_pred <- e_gps_std$SL.predict
  w_resid <- (w-e_gps_pred)/e_gps_std_pred
  gps <- approx(density(w_resid,na.rm = TRUE)$x,density(w_resid,na.rm = TRUE)$y,xout=w_resid,rule=2)$y

  dataset <- cbind(Y,w,c,gps)

  bin.num<-seq(min(dataset$w)+delta_n/2, max(dataset$w), by = delta_n)

  matched_set <-  lapply(bin.num,
                        matching_fun,
                        dataset=dataset,
                        e_gps_pred = e_gps_pred,
                        e_gps_std_pred = e_gps_std_pred,
                        delta_n=delta_n,
                        w_resid=w_resid,
                        scale=scale)

  return(data.table(Reduce(rbind,matched_set)))
}
